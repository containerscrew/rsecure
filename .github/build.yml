name: Build

on:
  pull_request:
  push:
    paths:
      - "src/**"
      - ".github/workflows/build.yml"
    branches:
      - "**"

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Build - ${{ matrix.platform.release_for }}
    strategy:
      matrix:
        platform:
          - release_for: linux-arm64
            os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu

          - release_for: linux-amd64
            os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu

          - release_for: darwin-amd64
            os: macOS-latest
            target: x86_64-apple-darwin

          - release_for: darwin-arm64
            os: macOS-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get -y install linux-headers-$(uname -r)

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rsecure-v1"
          cache-all-crates: true

      - name: Rustup
        run: |
          rustup install stable
          rustup default stable
          rustup target add ${{ matrix.platform.target }}

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.platform.target }}

      - name: Test package zip
        run: |
          TAG_NAME=$(echo "${{ github.ref }}" | sed 's|.*/||')
          zip -j rsecure-${{ matrix.platform.release_for }}-${{ env.TAG_NAME }}.zip target/${{ matrix.platform.target}}/release/rsecure

  publish-crate:
    name: Publish crate to creates.io
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: |
          rustup update
          rustup default ${{ env.RUST_VERSION }}
      - name: Publish to creates.io (dry-run)
        run: |
          cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --dry-run
